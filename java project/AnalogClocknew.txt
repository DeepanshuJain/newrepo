1:/*
   2: * Programming graphical user interfaces
   3: * Example: AnalogClock.java
   4: * Jarkko Leponiemi 2003
   5: */
   6:
   7:import java.awt.*;
   8:import java.awt.event.*;
   9:import java.util.*;
  10:import javax.swing.*;
  11:
  12:public class AnalogClock
  13:  extends JComponent
  14:  implements Runnable
  15:  {
  16:  
  17:  public AnalogClock()
  18:    {
  19:    (new Thread(this)).start();
  20:    }
  21:  
  22:  public void run()
  23:    {
  24:    try {
  25:      for(;;)
  26:        {
  27:        Thread.sleep(500);
  28:        repaint();
  29:        }
  30:      }
  31:    catch (InterruptedException e)
  32:      {
  33:      Thread.currentThread().interrupt();
  34:      }
  35:    }
  36:  
  37:  public void paint(Graphics graphics)
  38:    {
  39:    super.paint(graphics);
  40:    
  41:    // calculate the time values
  42:    //long t = System.currentTimeMillis();
  43:    long t = (new Date()).getTime();
  44:    // milliseconds in the current minute
  45:    long minute = t % MILLIS_IN_MINUTE;
  46:    // seconds in the current minute
  47:    long secs_min = minute / 1000L;
  48:    // milliseconds in the current hour
  49:    long hour = t %  MILLIS_IN_HOUR;
  50:    // milliseconds in the current half day
  51:    long hday = t % MILLIS_IN_HALF_DAY;
  52:    
  53:    // calculate the clock hand angles
  54:    double sec_angle = -Math.PI / 2 + secs_min * SECS_IN_MINUTE_TO_ANGLE;
  55:    double min_angle = -Math.PI / 2 + hour * MILLIS_IN_HOUR_TO_ANGLE;
  56:    double hour_angle = -Math.PI / 2 + hday * MILLIS_IN_HALF_DAY_TO_ANGLE;
  57:    
  58:    // Draw the hands
  59:    Graphics2D g = (Graphics2D) graphics;
  60:    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
  61:              RenderingHints.VALUE_ANTIALIAS_ON);
  62:    size = getSize(size);
  63:    insets = getInsets(insets);
  64:    int radius = Math.min(size.width - insets.left - insets.top,
  65:                size.height - insets.top - insets.bottom) / 2;
  66:    g.translate((double) size.width / 2D, (double) size.height / 2D);
  67:    
  68:    // draw the seconds
  69:    g.setColor(Color.red);
  70:    g.setStroke(SEC_STROKE);
  71:    g.rotate(sec_angle);
  72:    g.drawLine(0, 0, radius - 6, 0);
  73:    g.rotate(-sec_angle);
  74:    
  75:    // draw the minutes
  76:    g.setColor(Color.black);
  77:    g.setStroke(MIN_STROKE);
  78:    g.rotate(min_angle);
  79:    g.drawLine(0, 0, radius - 10, 0);
  80:    g.rotate(-min_angle);
  81:    
  82:    // draw the hours
  83:    g.setColor(Color.black);
  84:    g.setStroke(HOUR_STROKE);
  85:    g.rotate(hour_angle);
  86:    g.drawLine(0, 0, radius / 2, 0);
  87:    g.rotate(-hour_angle);
  88:    
  89:    // draw the perimeter
  90:    g.setColor(Color.darkGray);
  91:    g.drawOval(-radius + 2, -radius + 2, 2 * radius - 4, 2 * radius - 4);
  92:    }
  93:  
  94:  private static long MILLIS_IN_MINUTE = 60L * 1000L;
  95:  private static long MILLIS_IN_HOUR = MILLIS_IN_MINUTE * 60L;
  96:  private static long MILLIS_IN_HALF_DAY = MILLIS_IN_HOUR * 12L;
  97:  
  98:  private static double SECS_IN_MINUTE_TO_ANGLE =
  99:    (2 * Math.PI / 60L);
 100:  private static double MILLIS_IN_HOUR_TO_ANGLE =
 101:    (2 * Math.PI / MILLIS_IN_HOUR);
 102:  private static double MILLIS_IN_HALF_DAY_TO_ANGLE =
 103:    (2 * Math.PI / MILLIS_IN_HALF_DAY);
 104:  
 105:  private static Stroke SEC_STROKE = new BasicStroke();
 106:  private static Stroke MIN_STROKE =
 107:    new BasicStroke(4F, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND);
 108:  private static Stroke HOUR_STROKE = MIN_STROKE;
 109:  
 110:  private Dimension size = null;
 111:  private Insets insets = new Insets(0, 0, 0, 0);
 112:  
 113:  public static void main(String[] args)
 114:    {
 115:    JFrame f = new JFrame("Clock");
 116:    AnalogClock clock = new AnalogClock();
 117:    f.getContentPane().add(clock);
 118:    f.addWindowListener(new WindowAdapter() {
 119:      public void windowClosing(WindowEvent e) {
 120:        System.exit(0);
 121:      }
 122:    });
 123:    f.setBounds(50, 50, 200, 200);
 124:    f.show();
 125:    }
 126:  
 127:  }